include_guard()

if(EXISTS "${ImGui_SRCDIR}" AND EXISTS "${ImGui_SRCDIR}/imgui.cpp")
    set(ImGui TRUE)
else()
    include(${CMAKE_CURRENT_LIST_DIR}/ImGuiOptions.cmake)
endif()

function(imgui_option OPTION DESCRIPTION DEFAULT)
    if(ImGui)
        option(ImGui_${OPTION} "${DESCRIPTION}" ${DEFAULT})
        set(ImGui_${OPTION}_DESCRIPTION "${DESCRIPTION}")
        set(ImGui_${OPTION}_DEFAULT ${DEFAULT})
        list(APPEND ImGui_OPTIONS ${OPTION})
        set(ImGui_OPTIONS "${ImGui_OPTIONS}" PARENT_SCOPE)
        set(ImGui_${OPTION}_DESCRIPTION "${DESCRIPTION}" PARENT_SCOPE)
        set(ImGui_OPTIONS_CMAKE)
        foreach(OPTION ${ImGui_OPTIONS})
            string(APPEND ImGui_OPTIONS_CMAKE
                "# ${ImGui_${OPTION}_DESCRIPTION}\nset(ImGui_${OPTION} ${ImGui_${OPTION}})\n")
        endforeach()
        set(ImGui_OPTIONS_CMAKE "${ImGui_OPTIONS_CMAKE}" PARENT_SCOPE)
    endif()
endfunction()

function(imgui_export TARGET)
    export(TARGETS ${TARGET} NAMESPACE ImGui::
        FILE ImGui${TARGET}.cmake)
    install(TARGETS ${TARGET} EXPORT ${TARGET})
    install(EXPORT ${TARGET} NAMESPACE ImGui::
        FILE ImGui${TARGET}.cmake
        DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/imgui)
endfunction()

function(imgui_core)
    set(TARGET Core)
    list(APPEND ImGui_SUPPORTED_COMPONENTS ${TARGET})
    set(ImGui_SUPPORTED_COMPONENTS "${ImGui_SUPPORTED_COMPONENTS}" PARENT_SCOPE)
    list(APPEND ImGui_AVAILABLE_COMPONENTS ${TARGET})
    set(ImGui_AVAILABLE_COMPONENTS "${ImGui_AVAILABLE_COMPONENTS}" PARENT_SCOPE)
    if(ImGui AND "${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL "${ImGui_SRCDIR}/examples")
        cmake_parse_arguments(TARGET "" "" "HEADERS;PRIVATE_HEADERS;SOURCES" ${ARGN})
        add_library(${TARGET} INTERFACE)
        include(GNUInstallDirs)
        target_include_directories(${TARGET} INTERFACE
            $<BUILD_INTERFACE:${ImGui_SRCDIR}>
            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/imgui>)
        foreach(HEADER ${TARGET_HEADERS})
            target_sources(${TARGET}
                INTERFACE
                    $<BUILD_INTERFACE:${ImGui_SRCDIR}/${HEADER}>
                    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/imgui/${HEADER}>)
            install(FILES ${ImGui_SRCDIR}/${HEADER}
                DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/imgui)
        endforeach()
        foreach(PRIVATE_HEADER ${TARGET_PRIVATE_HEADERS})
            install(FILES ${ImGui_SRCDIR}/${PRIVATE_HEADER}
                DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/imgui)
        endforeach()
        foreach(SOURCE ${TARGET_SOURCES})
            target_sources(${TARGET}
                INTERFACE
                    $<BUILD_INTERFACE:${ImGui_SRCDIR}/${SOURCE}>
                    $<INSTALL_INTERFACE:${CMAKE_INSTALL_DATAROOTDIR}/imgui/${SOURCE}>)
            install(FILES ${ImGui_SRCDIR}/${SOURCE}
                DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/imgui)
        endforeach()
        imgui_export(${TARGET})
    elseif(ImGui)
        add_library(ImGui::${TARGET} ALIAS ${TARGET})
    else()
        include(${CMAKE_CURRENT_LIST_DIR}/ImGui${TARGET}.cmake)
    endif()
endfunction()

function(imgui_library TARGET INFIX_PATH)
    cmake_parse_arguments(TARGET "" "" "HEADERS;SOURCES;PACKAGES;TARGETS" ${ARGN})
    if(ImGui AND "${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL "${ImGui_SRCDIR}/examples")
        if(ImGui_3RDPARTY)
            set(TARGET_DEPENDENCIES TRUE)
            foreach(PACKAGE ${TARGET_PACKAGES})
                find_package(${PACKAGE} QUIET)
                if(NOT ${PACKAGE}_FOUND)
                    set(TARGET_DEPENDENCIES FALSE)
                endif()
            endforeach()
            foreach(INTERFACE_TARGET ${TARGET_TARGETS})
                if(NOT TARGET ${INTERFACE_TARGET})
                    set(TARGET_DEPENDENCIES FALSE)
                endif()
            endforeach()
            if(NOT TARGET_DEPENDENCIES)
                message(STATUS "Skip ${TARGET} library because not all dependencies found")
                return()
            endif()
        endif()
        add_library(${TARGET} INTERFACE)
        target_link_libraries(${TARGET} INTERFACE Core)
        foreach(HEADER ${TARGET_HEADERS})
            target_sources(${TARGET}
                INTERFACE
                    $<BUILD_INTERFACE:${ImGui_SRCDIR}/${INFIX_PATH}/${HEADER}>
                    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/imgui/${HEADER}>)
            install(FILES ${ImGui_SRCDIR}/${INFIX_PATH}/${HEADER}
                DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/imgui)
        endforeach()
        foreach(SOURCE ${TARGET_SOURCES})
            target_sources(${TARGET}
                INTERFACE
                    $<BUILD_INTERFACE:${ImGui_SRCDIR}/${INFIX_PATH}/${SOURCE}>
                    $<INSTALL_INTERFACE:${CMAKE_INSTALL_DATAROOTDIR}/imgui/${SOURCE}>)
            install(FILES ${ImGui_SRCDIR}/${INFIX_PATH}/${SOURCE}
                DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/imgui)
        endforeach()
        target_include_directories(${TARGET} INTERFACE
            $<BUILD_INTERFACE:${ImGui_SRCDIR}/${INFIX_PATH}>
            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/imgui>)
        if(NOT ImGui_3RDPARTY)
            imgui_export(${TARGET})
            return()
        endif()
        if(SDL2::SDL2 IN_LIST TARGET_TARGETS)
            get_target_property(SDL2_INCLUDE_DIR SDL2::SDL2 INTERFACE_INCLUDE_DIRECTORIES)
            if(EXISTS ${SDL2_INCLUDE_DIR}/SDL2)
                target_include_directories(${TARGET} INTERFACE
                    $<BUILD_INTERFACE:${SDL2_INCLUDE_DIR}/SDL2>
                    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/SDL2>)
            endif()
        endif()
        foreach(INTERFACE_TARGET ${TARGET_TARGETS})
            target_link_libraries(${TARGET}
                INTERFACE ${INTERFACE_TARGET})
        endforeach()
        imgui_export(${TARGET})
    elseif(ImGui)
        if(TARGET ${TARGET})
            list(APPEND ImGui_AVAILABLE_COMPONENTS ${TARGET})
            set(ImGui_AVAILABLE_COMPONENTS "${ImGui_AVAILABLE_COMPONENTS}" PARENT_SCOPE)
            if(${TARGET} IN_LIST ImGui_FIND_COMPONENTS
                AND NOT TARGET ImGui::${TARGET})
                add_library(ImGui::${TARGET} ALIAS ${TARGET})
            endif()
        endif()
    else()
        if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/ImGui${TARGET}.cmake)
            list(APPEND ImGui_AVAILABLE_COMPONENTS ${TARGET})
            set(ImGui_AVAILABLE_COMPONENTS "${ImGui_AVAILABLE_COMPONENTS}" PARENT_SCOPE)
        endif()
        if(${TARGET} IN_LIST ImGui_FIND_COMPONENTS)
            include(${CMAKE_CURRENT_LIST_DIR}/ImGui${TARGET}.cmake)
            if(ImGui_3RDPARTY)
                include(CMakeFindDependencyMacro)
                foreach(PACKAGE ${TARGET_PACKAGES})
                    find_dependency(${PACKAGE} REQUIRED)
                endforeach()
            else()
                message(STATUS "Please manualy link 3-rd party dependencies for ${TARGET} library")
            endif()
        endif()
    endif()
endfunction()

function(imgui_binding TARGET)
    list(APPEND ImGui_SUPPORTED_COMPONENTS ${TARGET})
    set(ImGui_SUPPORTED_COMPONENTS "${ImGui_SUPPORTED_COMPONENTS}" PARENT_SCOPE)
    if(NOT ImGui_BINDINGS)
        return()
    endif()
    imgui_library(${TARGET} examples ${ARGN})
    set(ImGui_AVAILABLE_COMPONENTS "${ImGui_AVAILABLE_COMPONENTS}" PARENT_SCOPE)
endfunction()

function(imgui_misc TARGET)
    list(APPEND ImGui_SUPPORTED_COMPONENTS ${TARGET})
    set(ImGui_SUPPORTED_COMPONENTS "${ImGui_SUPPORTED_COMPONENTS}" PARENT_SCOPE)
    if(NOT ImGui_MISC)
        return()
    endif()
    string(TOLOWER "misc/${TARGET}" INFIX_PATH)
    imgui_library(${TARGET} ${INFIX_PATH} ${ARGN})
    set(ImGui_AVAILABLE_COMPONENTS "${ImGui_AVAILABLE_COMPONENTS}" PARENT_SCOPE)
endfunction()

function(imgui_example SUBDIRECTORY)
    if(NOT ImGui_EXAMPLES OR NOT ImGui_3RDPARTY)
        return()
    endif()
    cmake_parse_arguments(EXAMPLE "" "" "TARGETS;BINDINGS;MISC" ${ARGN})
    if(EXAMPLE_BINDINGS AND NOT ImGui_BINDINGS)
        return()
    endif()
    if(EXAMPLE_MISC AND NOT ImGui_MISC)
        return()
    endif()
    set(EXAMPLE_DEPENDENCIES TRUE)
    foreach(TARGET ${EXAMPLE_TARGETS} ${EXAMPLE_BINDINGS})
        if(NOT TARGET ${TARGET})
            set(EXAMPLE_DEPENDENCIES FALSE)
        endif()
    endforeach()
    if(EXAMPLE_DEPENDENCIES)
        add_subdirectory(${SUBDIRECTORY})
    else()
        message(STATUS "Skip ${SUBDIRECTORY} because not all dependencies found")
    endif()
endfunction()
